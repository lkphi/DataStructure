输入格式：给出两颗二叉树的信息
先在一行给出树的结点数
随后N行 第i行对应编号的第i个结点，给出该结点中存储的字母，其左孩子结点编号和右孩子结点编号
如果孩子节点为空，则相应位置为#
8
A 1 2
B 3 4
C 5 #
D # #
E 6 #
G 7 #
F # #
H # #
8
G # 4
B 7 6
F # #
A 5 1
H # #
C 0 #
D # #
E 2 #
Yes

8
B 5 7
F # #
A 0 3
C 6 #
H # #
D # #
G 4 #
E 1 #
8
D 6 #
B 5 #
E # #
H # #
C 0 2
G # 3
F # #
A 1 4
No

save oo7
//设鳄鱼池是长宽为100米的方形，中心坐标为(0, 0)，且东北角坐标为(50, 50)。
//池心岛是以(0, 0) 为圆心、直径15米的圆。给定池中分布的鳄鱼的坐标、
//以及007一次能跳跃的最大距离，你需要告诉他是否有可能逃出生天。
//输入格式：首先第一行给出两个正整数：鳄鱼数量 N（≤）和007一次能跳跃的最大距离 D。
//随后 N 行，每行给出一条鳄鱼的 ( 坐标。注意：不会有两条鳄鱼待在同一个点上。
//输入格式：如果007有可能逃脱，就在一行中输出"Yes"，否则输出"No"。
14 20                             
25 -15                 
-25 28
8 49
29 15
-35 -2
5 28
27 -29
-8 -28
-20 -35
-25 -20
-13 29
-30 15
-35 40
12 12
Yes

4 13
-12 12
12 12
-12 -12
12 -12
No


六度空间
//六度空间”理论又称作“六度分隔（Six Degrees of Separation）”理论。
//这个理论可以通俗地阐述为：“你和任何一个陌生人之间所间隔的人不会超过六个，
//也就是说，最多通过五个人你就能够认识任何一个陌生人。
//输入格式：输入第1行给出两个正整数，分别表示社交网络图的结点数NN（1<N≤10^​4​​，表示人数）、
//边数MM（≤33×N，表示社交关系数）。随后的MM行对应MM条边，每行给出一对正整数，分别是该条边直接连通的两个结点的编号（节点从1到NN编号）。
//输出格式：对每个结点输出与该结点距离不超过6的结点数占结点总数的百分比，精确到小数点后2位。每个结节点输出一行，格式为“结点编号:（空格）百分比%”。
10 9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
输出样例:
1: 70.00%
2: 80.00%
3: 90.00%
4: 100.00%
5: 100.00%
6: 100.00%
7: 100.00%
8: 90.00%
9: 80.00%
10: 70.00%

旅游规划
///有了一张自驾旅游路线图，你会知道城市间的高速公路长度、
///以及该公路要收取的过路费。现在需要你写一个程序，
///帮助前来咨询的游客找一条出发地和目的地之间的最短路径。
///如果有若干条路径都是最短的，那么需要输出最便宜的一条路径。
///输入说明：输入数据的第1行给出4个正整数N、M、S、D，
///其中N（2≤N≤500）是城市的个数，顺便假设城市的编号为0~(N−1)；
///M是高速公路的条数；S是出发地的城市编号；D是目的地的城市编号。
///随后的M行中，每行给出一条高速公路的信息，
///分别是：城市1、城市2、高速公路长度、收费额，中间用空格分开，
///数字均为整数且不超过500。输入保证解的存在。
///输出格式在一行里输出路径的长度和收费总额，数字间以空格分隔，输出结尾不能有多余空格。
输入
4 5 0 3
0 1 1 20
1 3 2 30
0 3 4 10
0 2 2 20
2 3 1 20
输出
3 40


HarryPotter Test
哈利·波特要考试了，他需要你的帮助。这门课学的是用魔咒将一种动物变成另一种动物的本事。
例如将猫变成老鼠的魔咒是haha，将老鼠变成鱼的魔咒是hehe等等。
反方向变化的魔咒就是简单地将原来的魔咒倒过来念，例如ahah可以将老鼠变成猫。
另外，如果想把猫变成鱼，可以通过念一个直接魔咒lalala，也可以将猫变老鼠、老鼠变鱼的魔咒连起来念：hahahehe。
现在哈利·波特的手里有一本教材，里面列出了所有的变形魔咒和能变的动物。
老师允许他自己带一只动物去考场，要考察他把这只动物变成任意一只指定动物的本事。
于是他来问你：带什么动物去可以让最难变的那种动物
（即该动物变为哈利·波特自己带去的动物所需要的魔咒最长）需要的魔咒最短？
例如：如果只有猫、鼠、鱼，则显然哈利·波特应该带鼠去，因为鼠变成另外两种动物都只需要念4个字符；而如果带猫去，则至少需要念6个字符才能把猫变成鱼；同理，带鱼去也不是最好的选择。
输入格式:
输入说明：输入第1行给出两个正整数N (≤100)和M，其中N是考试涉及的动物总数，
M是用于直接变形的魔咒条数。为简单起见，我们将动物按1~N编号。
随后M行，每行给出了3个正整数，分别是两种动物的编号、以及它们之间变形需要的魔咒的长度(≤100)，数字之间用空格分隔。
输出
哈利·波特应该带去考场的动物的编号、//以及最长的变形魔咒的长度，中间以空格分隔。
如果只带1只动物是不可能完成所有变形要求的，则输出0。
如果有若干只动物都可以备选，则输出编号最小的那只。4 70
6 11
3 4 70
1 2 1
5 4 50
2 6 50
5 6 60
1 3 70
4 6 60
3 6 80
5 1 100
2 4 60
5 2 80

4

Hard Version
已知H(x)=x%N以及用线性探测解决冲突问题，给出散列结果，反求输入顺序
输入格式：
Each input file contains one test case. 
For each test case, the first line contains a positive integer N (≤1000), 
which is the size of the hash table. 
The next line contains N integers, separated by a space. 
A negative integer represents an empty cell in the hash table. 
It is guaranteed that all the non-negative integers are distinct in the table.

输出格式：
For each test case, print a line that contains the input sequence, 
with the numbers separated by a space.
Notice that there must be no extra space at the end of each line.

Sample Input:
11
33 1 13 12 34 38 27 22 32 -1 21
Sample Output:
1 13 12 21 33 34 38 27 22 32

Insert or Merge
输入两个数列a和b，叫你判断从a到b是经过了插入排序呢，还是归并排序。 
Sample Input 1:
10
3 1 2 8 7 5 9 4 6 0
1 2 3 7 8 5 9 4 6 0
Sample Output 1:
Insertion Sort
1 2 3 5 7 8 9 4 6 0
Sample Input 2:
10
3 1 2 8 7 5 9 4 0 6
1 3 2 8 5 7 4 9 0 6   
归并次数 1
Sample Output 2:
Merge Sort
1 2 3 8 4 5 7 9 0 6
Sample Input 3:从头开始连续有序的子列长度
8
2 1 8 9 6 5 3 4
1 2 8 9 5 6 3 4
Sample Output 3:
Merge Sort
1 2 8 9 5 6 3 4    
归并次数 1
Sample Input 4:所有连续有序子列的最短长度
14
4 2 1 3 13 14 12 11 8 9 7 6 10 5
1 2 3 4 11 12 13 14 6 7 8 9 5 10
Sample Output 4:
Merge Sort
1 2 3 4 11 12 13 14 6 7 8 9 5 10        
归并次数 2

归并排序第一步 什么都变了
8
11 2 9 4 23 6 17 8
2 11 4 9 6 23 8 17
Merge Sort
2 11 4 9 6 23 8 17

插入排序第一步什么也没发生改变
8 
1 5 34 13 23 10 22 12
1 5 34 13 23 10 22 12
Insertion Sort
1 5 34 13 23 10 22 12

尾部子列无变化，但是前面变了（归并排序）
8
11 2 9 4 6 23 8 17
2 11 4 9 6 23 8 17
Merge Sort
2 11 4 9 6 23 8 17     
归并次数  1

20
23 6 45 8 78 24 43 54 5 13 87 33 56 9 49 25 32 1 6 7
6 8 23 24 43 45 54 78 5 9 13 25 33 49 56 87 1 6 7 32
Merge Sort
6 8 23 24 43 45 54 78 5 9 13 25 33 49 56 87 1 6 7 32
归并次数  3